meta:
  repo_uri: (( param "Please provide repo_uri" ))
  opsman_vm_state_repo_uri: (( param "Please provide opsman_vm_state_repo_uri" ))
  git_tag: (( param "Please provise git_tag" ))
  git_private_key: (( param "Please provide git_private_key" ))

  minio_access_key: (( param "Please provide minio_access_key" ))
  minio_secret_key: (( param "Please provide minio_secret_key" ))
  minio_url: (( param "Please provide minio_url" ))
  minio_region: (( param "Please provide minio_region" ))
  minio_bucket_for_pivotal_product: (( param "Please provide minio_bucket_for_pivotal_product" ))

  # duplicated in environment-template.yml
  ci_docker_image: (( param "Please provide ci_docker_image" ))
  ci_docker_image_tag: (( param "Please provide ci_docker_tag" ))
  task_image:
    type: docker-image
    source:
      repository: (( grab meta.ci_docker_image ))
      tag: (( grab meta.ci_docker_image_tag ))  



check-s3: &check-s3
  config:
    platform: linux
    image_resource: (( grab meta.task_image ))
    params:
      MINIO_ACCESS_KEY: (( grab meta.minio_access_key ))
      MINIO_SECRET_KEY: (( grab meta.minio_secret_key ))
      MINIO_URL: (( grab meta.minio_url ))
    run:
      path: sh
      args:
      - -ec
      - |
        : "${MINIO_URL:? MINIO_URL must be set }"
        : "${MINIO_ACCESS_KEY:? MINIO_ACCESS_KEY must be set }"
        : "${MINIO_SECRET_KEY:? MINIO_SECRET_KEY must be set }"

        set -eu
        mc config host add minio ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
        mc --debug ls minio

check-pivnet: &check-pivnet
  config:
    platform: linux
    image_resource: (( grab meta.task_image ))
    params:
      PIVNET_TOKEN: "((pivnet-refresh-token))"
    run:
      path: sh
      args:
      - -ec
      - |
        set -eu
        curl -f -i -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Token $PIVNET_TOKEN" -X GET https://network.pivotal.io/api/v2/authentication

groups:
- name: pivnet-downloads
  jobs:
  - fetch-opsman
  - fetch-platform-automation

jobs:
- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - task: check-pivotal-platform-automation-prerequisites------pivnet
    <<: *check-pivnet
  - task: check-pivotal-platform-automation-prerequisites-and-ensure-bucket-created------s3
    config:
      platform: linux
      image_resource: (( grab meta.task_image ))
      params:
        MINIO_ACCESS_KEY: (( grab meta.minio_access_key ))
        MINIO_SECRET_KEY: (( grab meta.minio_secret_key ))
        MINIO_URL: (( grab meta.minio_url ))
        MINIO_REGION: (( grab meta.minio_region ))
        MINIO_BUCKET: (( grab meta.minio_bucket_for_pivotal_product ))
      run:
        path: sh
        args:
        - -ec
        - |
          : "${MINIO_URL:? MINIO_URL must be set }"
          : "${MINIO_ACCESS_KEY:? MINIO_ACCESS_KEY must be set }"
          : "${MINIO_SECRET_KEY:? MINIO_SECRET_KEY must be set }"
          : "${MINIO_REGION:? MINIO_REGION must be set }"
          : "${MINIO_BUCKET:? MINIO_BUCKET must be set }"

          set -eu
          mc config host add minio ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
          mc --debug ls minio
          mc --debug mb -p minio/${MINIO_BUCKET} --region=$MINIO_REGION
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
- name: fetch-opsman
  serial: true
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: check-prerequisites------pivnet
    <<: *check-pivnet
  - task: check-prerequisites------s3
    <<: *check-s3
  - task: interpolate-creds
    <<: *interpolate-creds
  - task: check-interpolated-creds
    <<: *check-interpolated-creds
  - task: download-product-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: config/download-ops-manager.yml
    input_mapping:
      config: interpolated-creds
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
resources:
- name: platform-automation-pivnet
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))
    #product_version: 2\.(.*)
    #sort_by: semver
- name: environment-state-repo
  type: git
  source:
    uri: (( grab meta.opsman_vm_state_repo_uri ))
    private_key: (( grab meta.git_private_key ))
    branch: master
- name: config
  type: git
  source:
    uri: (( grab meta.repo_uri ))
    private_key: (( grab meta.git_private_key ))
    branch: master
- name: ci-tasks
  type: git
  source:
    private_key: (( grab meta.git_private_key ))
    uri: (( grab meta.repo_uri ))
    branch: (( grab meta.git_tag ))
    paths: [ci/tasks/*]

- name: opsman-product
  type: s3
  source:
    endpoint: (( grab meta.minio_url ))
    access_key_id: (( grab meta.minio_access_key ))
    bucket: (( grab meta.minio_bucket_for_pivotal_product ))
    region_name: (( grab meta.minio_region ))
    secret_access_key: (( grab meta.minio_secret_key ))
    regexp: \[ops-manager,(.*)\].*.ova
- name: platform-automation-tasks
  type: s3
  source:
    endpoint: (( grab meta.minio_url ))
    access_key_id: (( grab meta.minio_access_key ))
    bucket: (( grab meta.minio_bucket_for_pivotal_product ))
    region_name: (( grab meta.minio_region ))
    secret_access_key: (( grab meta.minio_secret_key ))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    endpoint: (( grab meta.minio_url ))
    access_key_id: (( grab meta.minio_access_key ))
    bucket: (( grab meta.minio_bucket_for_pivotal_product ))
    region_name: (( grab meta.minio_region ))
    secret_access_key: (( grab meta.minio_secret_key ))
    regexp: platform-automation-image-(.*).tgz

- name: daily
  type: time
  source:
    interval: 24h

# Duplicated in environment-template.yml
interpolate-creds: &interpolate-creds
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_username))
    CREDHUB_SECRET: ((credhub_password))
    CREDHUB_SERVER: ((credhub_url))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    PREFIX: '/concourse/main'
    INTERPOLATION_PATHS: config
    SKIP_MISSING: true
  input_mapping:
    files: config
  output_mapping:
    interpolated-files: interpolated-creds
check-interpolated-creds: &check-interpolated-creds
  config:
    platform: linux
    image_resource: (( grab meta.task_image ))
    inputs:
    - name: interpolated-creds
    run:
      path: sh
      args:
      - -ec
      - |
        cat interpolated-creds/config/*
